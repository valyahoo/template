{"version":3,"file":"static/js/1295.179239a3.chunk.js","mappings":"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","sources":["components/external/UserPasswordTab.js","components/ApiAdmin.js","components/external/index.js","components/Custom.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { Typography, Button } from '@material-ui/core';\r\nimport Box from '@mui/material/Box';\r\nimport TextField from '@mui/material/TextField';\r\nimport { FormControl } from '@mui/material';\r\nimport {useRecordContext, useDataProvider} from \"react-admin\";\r\nimport {httpAuthClient} from \"../../rav4-jsonapi-client/ra-jsonapi-client\"\r\nimport { useConf } from \"../../Config\";\r\nimport { useNotify } from 'react-admin';\r\n\r\nexport const UserPasswordTab = () => {\r\n    const conf = useConf();\r\n    const notify = useNotify();\r\n    const record = useRecordContext();\r\n    const dataProvider = useDataProvider();\r\n    const [pwdValue, setPwdValue] = useState(\"\");\r\n    const [rpwdValue, setRPwdValue] = useState(\"\");\r\n    const [submitColor, setSubmitColor] = useState(\"\")\r\n    const onPwdChange = (e) => {\r\n        let pwdValue = e.target.value\r\n        setPwdValue(pwdValue)\r\n        setSubmitColor(pwdValue === rpwdValue && pwdValue.length > 5  ? \"primary\" : \"\")\r\n        console.log(pwdValue, rpwdValue);\r\n    }\r\n    const onRPwdVerify = (e) => {\r\n        let rpwdValue = e.target.value\r\n        setRPwdValue(rpwdValue)\r\n        setSubmitColor(pwdValue === rpwdValue && pwdValue.length > 5 ? \"primary\" : \"\")\r\n        console.log(pwdValue, rpwdValue);\r\n        \r\n    }\r\n    const handleSubmit = () => {\r\n        console.log(rpwdValue);\r\n        if(pwdValue !== rpwdValue){\r\n            notify('Passwords don\\'t match',  { type: 'warning' })\r\n            return\r\n        }\r\n        if(pwdValue.length < 6){\r\n            notify('Password too short',  { type: 'warning' })\r\n            return\r\n        }\r\n        const data = {\r\n            \"password\": pwdValue\r\n        }\r\n        httpAuthClient(`${conf.api_root}/Users/${record.id}/change_password`, {\r\n            method: 'POST',\r\n            body: JSON.stringify(data)\r\n        })\r\n        .then(()=>notify('Password Changed!'))\r\n        .catch(()=>notify(`Error Changing Password`,  { type: 'warning' }))\r\n          \r\n    }\r\n\r\n    return (\r\n        <Box\r\n        component=\"form\"\r\n        sx={{\r\n            '& .MuiTextField-root': { m: 1, width: '25ch' },\r\n        }}\r\n        noValidate\r\n        autoComplete=\"off\"\r\n        >\r\n        <FormControl>\r\n            <Grid item xs={12} spacing={4} margin={5} >\r\n                <Typography variant=\"body2\" component=\"p\" ><b>Change the user password</b></Typography>\r\n            </Grid>\r\n            <Grid item xs={12} spacing={4} margin={5} >\r\n            <TextField\r\n                id=\"outlined-password-input\"\r\n                label=\"New Password\"\r\n                type=\"password\"\r\n                onChange={onPwdChange}\r\n            />\r\n            </Grid>\r\n            <Grid item xs={12} spacing={4} margin={5} >\r\n            <TextField\r\n                id=\"outlined-password-input\"\r\n                label=\"Repeat Password\"\r\n                type=\"password\"\r\n                onChange={onRPwdVerify}\r\n            />\r\n            </Grid>\r\n            <Grid item xs={12} spacing={4} margin={5} >\r\n            <Button variant=\"contained\" color={submitColor} onClick={handleSubmit}>Submit</Button>\r\n            </Grid>\r\n        </FormControl>\r\n        </Box>\r\n    );\r\n}\r\n\r\n\r\nexport const ApiUserPasswordTab = () => {\r\n    const conf = useConf();\r\n    const notify = useNotify();\r\n    const record = useRecordContext();\r\n    const dataProvider = useDataProvider();\r\n    const [curPwdValue, setCurPwdValue] = useState(\"\");\r\n    const [newPwdValue, setNewPwdValue] = useState(\"\");\r\n    const [rpwdValue, setRPwdValue] = useState(\"\");\r\n    const [submitColor, setSubmitColor] = useState(\"\")\r\n\r\n    const onCurPwdChange = (e) => {\r\n        let pwdValue = e.target.value\r\n        setCurPwdValue(pwdValue)\r\n        setSubmitColor(pwdValue === rpwdValue && pwdValue.length > 5  ? \"primary\" : \"\")\r\n    }\r\n    const onNewPwdChange = (e) => {\r\n        let pwdValue = e.target.value\r\n        setNewPwdValue(pwdValue)\r\n        setSubmitColor(pwdValue === rpwdValue && pwdValue.length > 5  ? \"primary\" : \"\")\r\n    }\r\n    const onRPwdVerify = (e) => {\r\n        let rpwdValue = e.target.value\r\n        setRPwdValue(rpwdValue)\r\n        setSubmitColor(newPwdValue === rpwdValue && newPwdValue.length > 5 ? \"primary\" : \"\")\r\n    }\r\n    const handleSubmit = () => {\r\n        console.log(rpwdValue);\r\n        if(newPwdValue !== rpwdValue){\r\n            notify('Passwords don\\'t match',  { type: 'warning' })\r\n            return\r\n        }\r\n        if(newPwdValue.length < 1){\r\n            notify('Password too short',  { type: 'warning' })\r\n            return\r\n        }\r\n        const data = {\r\n            \"password\": newPwdValue\r\n        }\r\n        httpAuthClient(`${conf.api_root}/Users/${record.id}/change_password`, {\r\n            method: 'POST',\r\n            body: JSON.stringify(data)\r\n        })\r\n        .then(()=>notify('Password Changed!'))\r\n        .catch(()=>notify(`Error Changing Password`,  { type: 'warning' }))\r\n          \r\n    }\r\n\r\n    return (\r\n        <Box\r\n        component=\"form\"\r\n        sx={{\r\n            '& .MuiTextField-root': { m: 1, width: '25ch' },\r\n        }}\r\n        noValidate\r\n        autoComplete=\"off\"\r\n        >\r\n        <FormControl>\r\n            <Grid item xs={12} spacing={4} margin={5} >\r\n                <Typography variant=\"body2\" component=\"p\" ><b>Current user password</b></Typography>\r\n            </Grid>\r\n            <Grid item xs={12} spacing={4} margin={5} >\r\n            <TextField\r\n                id=\"outlined-password-input\"\r\n                label=\"Current Password\"\r\n                type=\"password\"\r\n                onChange={onCurPwdChange}\r\n            />\r\n            </Grid>\r\n            <Grid item xs={12} spacing={4} margin={5} >\r\n                <Typography variant=\"body2\" component=\"p\" ><b>New user password</b></Typography>\r\n            </Grid>\r\n            <Grid item xs={12} spacing={4} margin={5} >\r\n            <TextField\r\n                id=\"outlined-password-input\"\r\n                label=\"New Password\"\r\n                type=\"password\"\r\n                onChange={onNewPwdChange}\r\n            />\r\n            </Grid>\r\n            <Grid item xs={12} spacing={4} margin={5} >\r\n            <TextField\r\n                id=\"outlined-password-input\"\r\n                label=\"Repeat Password\"\r\n                type=\"password\"\r\n                onChange={onRPwdVerify}\r\n            />\r\n            </Grid>\r\n            <Grid item xs={12} spacing={4} margin={5} >\r\n            <Button variant=\"contained\" color={submitColor} onClick={handleSubmit}>Submit</Button>\r\n            </Grid>\r\n        </FormControl>\r\n        </Box>\r\n    );\r\n}\r\n","import * as React from 'react';\r\nimport { Modal, Box, Grid, TextField  } from \"@material-ui/core\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport PlayCircleOutlineIcon from '@mui/icons-material/PlayCircleOutline';\r\nimport Button from '@material-ui/core/Button';\r\nimport { useConf } from '../Config';\r\nimport {Loading,\r\n    TextInput,\r\n    useRecordContext,\r\n    useGetList\r\n} from 'react-admin'\r\nimport { useForm } from 'react-final-form';\r\nimport Radio from '@mui/material/Radio';\r\nimport RadioGroup from '@mui/material/RadioGroup';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormLabel from '@mui/material/FormLabel';\r\n\r\nconst boxStyle = {\r\n  position: 'absolute',\r\n  top: '50%',\r\n  left: '50%',\r\n  transform: 'translate(-50%, -50%)',\r\n  width: \"75%\",\r\n  bgcolor: 'background.paper',\r\n  border: '0px solid #000',\r\n  boxShadow: 24,\r\n  p: 4,\r\n  textAlign: \"left\"\r\n};\r\n\r\nconst useStyles = makeStyles({\r\n  joined_field : {cursor: \"pointer\", color: \"#3f51b5\"},\r\n  modalStyle:{\r\n    position:'absolute',\r\n    top:'10%',\r\n    left:'10%',\r\n    overflow:'scroll',\r\n    height:'100%',\r\n    fontWeight : \"0.6em\",\r\n    display: 'flex'\r\n  },\r\n  db_btn: {\r\n    height : \"80%\",\r\n    position: \"relative\",\r\n    top: \"50%\",\r\n    \"-webkit-transform\": \"translateY(-50%)\",\r\n    \"-ms-transform\": \"translateY(-50%)\",\r\n    \"transform\": \"translateY(-50%)\"\r\n  },\r\n  db_grid : {\r\n      \"& .MuiTextField-root\": {\r\n        borderBottom : \"4px solid white\",\r\n        paddingBottom: \"1em\",\r\n        paddingRight: \"1em\"\r\n      }\r\n  },\r\n  actions : {\r\n    textAlign : \"center\",\r\n    \"& button\": {\r\n        width: \"99%\"\r\n    }\r\n  },\r\n  conn_str: {backgroundColor: \"#ccc\",  fontFamily: \"Consolas\" }\r\n});\r\n\r\n\r\nconst C2Rpc = (url, data, options) => {\r\n    const defaultOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json', \r\n                    'Authorization' : `Bearer ${localStorage.getItem('auth_token')}` },\r\n        body: JSON.stringify(data || {})\r\n    }\r\n    const requestOptions = Object.assign(defaultOptions, options || {})\r\n    return fetch(url, requestOptions)\r\n}\r\n\r\nconst ApiModal = (props) => {\r\n    const conf = useConf()\r\n    const create_api = (record) =>{\r\n        const create_url = `${conf.api_root}/Apis/${record.id}/generate`\r\n        setOutput(<Loading/>)\r\n        box_style.top = \"90%\"\r\n        setBoxStyle(box_style)\r\n        C2Rpc(create_url)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                setOutput(<pre>{data}</pre>)\r\n            })\r\n    }\r\n    \r\n    const [open, setOpen] = React.useState(false);\r\n    const [output, setOutput] = React.useState(\"\");\r\n    const [box_style, setBoxStyle] = React.useState(boxStyle);\r\n    const handleOpen = (e) => {setOpen(true); e.stopPropagation();}\r\n    const handleClose = (e) => {e.stopPropagation();setOpen(false);}\r\n    const record = props.record\r\n    const classes = useStyles()\r\n    \r\n    return (\r\n        <span>\r\n        <span onClick={handleOpen} className={classes.joined_field} title={` Relationship` }><PlayCircleOutlineIcon/></span>\r\n        <Modal\r\n            className={classes.modalStyle}\r\n            open={open}\r\n            onClose={handleClose}\r\n            onClick={(e)=>e.stopPropagation()}\r\n            aria-labelledby=\"modal-modal-title\"\r\n            aria-describedby=\"modal-modal-description\"\r\n        >\r\n            <Box sx={box_style}>\r\n            <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\r\n                Create API \r\n            </Typography>\r\n                Pressing the button will generate an API with the following properties:\r\n                <dl>\r\n                <dt>Name:</dt>\r\n                <dd>{record?.name}</dd>\r\n                <dt>Database URL:</dt>\r\n                <dd>{record?.connection_string}</dd>\r\n                <dt>Port:</dt>\r\n                <dd>{record?.port}</dd>\r\n                <dt>Hostname:</dt>\r\n                <dd>{record?.hostname}</dd>\r\n                </dl>\r\n                <Button variant=\"outlined\" onClick={()=>create_api(record)}> Start <PlayCircleOutlineIcon/> </Button>\r\n                <hr/>\r\n                \r\n                {output}\r\n                \r\n            </Box>\r\n        </Modal>\r\n        </span>\r\n    );\r\n}\r\n\r\nexport const ApiGenerateField = (props) => {\r\n\r\n  if(props.mode === \"list\"){\r\n      return <ApiModal {...props}/>\r\n  }\r\n  return <></>\r\n}\r\n\r\nexport const ApiShow = (props) => {\r\n    return <>\r\n                <div>xxxx</div>\r\n                {props.show}\r\n            </>\r\n}\r\n\r\nconst DBConnectionEdit = (props) => {\r\n    const form = useForm();\r\n    const record = useRecordContext();\r\n    let value = record ? record[\"connection_string\"] : \"\";\r\n    const classes = useStyles()\r\n    const [open, setOpen] = React.useState(false);\r\n    const handleOpen = () => setOpen(true);\r\n    const handleClose = () => setOpen(false);\r\n    const [box_style,] = React.useState(boxStyle);\r\n    const [other, setOther] = React.useState(value);\r\n    const [username, setUsername] = React.useState(\"user\");\r\n    const [password, setPassword] = React.useState(\"pass\");\r\n    const [dbhost, setDbhost] = React.useState(\"dbhost\");\r\n    const [dbname, setDbname] = React.useState(\"dbname\");\r\n    const [dialect, setDialect] = React.useState(\"Other\");\r\n    const [logdata, setLogData] = React.useState(\"\")\r\n    const conf = useConf()\r\n\r\n    const selectDialect = (e) => {\r\n        const dialect = e.target.value\r\n        setDialect(dialect)\r\n        if(dialect === \"sqlite\"){\r\n            setUsername(\"\")\r\n            setPassword(\"\")\r\n            setDbhost(\"\")\r\n        }\r\n    }\r\n\r\n    const create_conn = () => {\r\n        let result = `${dialect}://`\r\n        if(dialect === \"Other\"){\r\n            result = other\r\n        }\r\n        else if(dialect === \"sqlite\"){\r\n            result += `/${dbname}`\r\n        }\r\n        else {\r\n            result += `${username}:${password}@${dbhost}/${dbname}`\r\n        }\r\n        return result\r\n    }\r\n\r\n    const test_conn = (connection_string) => {\r\n        const create_url = `${conf.api_root}/Apis/test_conn`\r\n        const req_data = { connection_string : connection_string}\r\n        C2Rpc(create_url, req_data)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            setLogData(<><Typography variant=\"h6\" component=\"h2\">Result:</Typography><pre>{data}</pre></>)\r\n            })\r\n        .catch(err => alert())\r\n    }\r\n\r\n    const create_api = () =>{\r\n        if(record.id === undefined){\r\n            const msg = \"you must first save the api\"\r\n            alert(msg)\r\n            setLogData(msg)\r\n            return\r\n        }\r\n        const create_url = `${conf.api_root}/Apis/${record.id}/generate`\r\n        setLogData(<Loading/>)\r\n        box_style.top = \"90%\"\r\n        C2Rpc(create_url)\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                setLogData(<pre>{data}</pre>)\r\n            })\r\n    }\r\n\r\n\r\n    return <>\r\n            <Grid item xs={12} spacing={4} margin={5} ></Grid>\r\n            <Grid item xs={4} spacing={4} margin={5} >\r\n                <TextInput source={'connection_string'} initialValue={create_conn()} helperText=\"SQLAlchemy connection string syntax\" fullWidth/>\r\n            </Grid>\r\n            <Grid item xs={4} spacing={4} margin={5} >\r\n                <Button variant=\"outlined\"\r\n                        onClick={handleOpen}\r\n                        color=\"primary\"\r\n                        size='large'\r\n                        className={classes.db_btn}\r\n                > \r\n                Configure Connection\r\n                </Button>\r\n            </Grid>\r\n            <Grid item xs={12} spacing={4} margin={5} ></Grid>\r\n            <Modal\r\n                open={open}\r\n                onClose={handleClose}\r\n                className={classes.modalStyle}\r\n                aria-labelledby=\"modal-modal-title\"\r\n                aria-describedby=\"modal-modal-description\"\r\n                >\r\n                <Box sx={box_style}>\r\n                <Grid container className={classes.db_grid}>\r\n                    <Grid item xs={12} spacing={4} margin={5} >\r\n                        <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\r\n                        Database Configuration\r\n                        </Typography>\r\n                        <hr/>\r\n                    </Grid>\r\n                    <Grid item xs={6} spacing={4} margin={5} >\r\n                        <FormControl>\r\n                            <FormLabel id=\"demo-radio-buttons-group-label\">DB Dialect</FormLabel>\r\n                            <RadioGroup\r\n                                aria-labelledby=\"demo-radio-buttons-group-label\"\r\n                                defaultValue=\"Other\"\r\n                                name=\"radio-buttons-group\"\r\n                                onChange={selectDialect}\r\n                            >\r\n                                <FormControlLabel value=\"mysql+pymysql\" control={<Radio />} label=\"MySQL\" />\r\n                                <FormControlLabel value=\"oracle\" control={<Radio />} label=\"Oracle\" />\r\n                                <FormControlLabel value=\"postgresql\" control={<Radio />} label=\"Postgres\" />\r\n                                <FormControlLabel value=\"sqlite\" control={<Radio />} label=\"SQLite\" />\r\n                                <FormControlLabel value=\"mssql+pyodbc\" control={<Radio />} label=\"SQLServer\" />\r\n                                <FormControlLabel value=\"Other\" control={<Radio />} label=\"Manual:\" />\r\n                            </RadioGroup>\r\n                            <TextField id=\"outlined-basic\" label=\"Manual\" variant=\"outlined\" \r\n                                        defaultValue={value}\r\n                                        onChange={(e) => setOther(e.target.value)} helperText=\"Manual connection string configuration\"/>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    \r\n                    <Grid item xs={6} spacing={4} margin={5} >\r\n                        <TextField label=\"Username\" variant=\"outlined\" onChange={(e)=>setUsername(e.target.value)} value={username}/>\r\n                        <TextField label=\"Password\" variant=\"outlined\" onChange={(e)=>setPassword(e.target.value)} value={password}/>\r\n                        <TextField label=\"Database host\" variant=\"outlined\" onChange={(e)=>setDbhost(e.target.value)} value={dbhost}/>\r\n                        <TextField label=\"Database name\" variant=\"outlined\" onChange={(e)=>setDbname(e.target.value)} value={dbname}/>\r\n                    </Grid>\r\n                    <Grid item xs={6} spacing={4} margin={5}>\r\n                    <Typography>\r\n                        Connection String: <span className={classes.conn_str}>{create_conn()}</span>\r\n                    </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12} spacing={4} margin={5} className={classes.actions}>\r\n                        <hr/>\r\n                    </Grid>\r\n                    <Grid item xs={12} spacing={4} margin={5} />\r\n                    <Grid item xs={2} spacing={4} margin={5} className={classes.actions}>\r\n                        <Button variant=\"outlined\" color=\"primary\" onClick={()=>test_conn(create_conn()) }> Test Connection</Button>\r\n                    </Grid>\r\n                    <Grid item xs={2} spacing={4} margin={5} className={classes.actions}>\r\n                        <Button variant=\"outlined\" color=\"primary\" onClick={()=>{setOpen(false); form.change('connection_string',create_conn()); }} >Save &amp; Close</Button>\r\n                    </Grid>\r\n                    <Grid item xs={2} spacing={4} margin={5} className={classes.actions}>\r\n                        <Button variant=\"outlined\" color=\"primary\" onClick={()=>create_api() } disabled={record.id ? false : true} title={record.id? \"\" : \"you must first save the api\"}>Generate API</Button>\r\n                    </Grid>\r\n                    <Grid item xs={2} spacing={4} margin={5} className={classes.actions}>\r\n                        <Button variant=\"outlined\" color=\"primary\" onClick={()=>setOpen(false) }>Close</Button>\r\n                    </Grid>\r\n                    \r\n                    <Grid item xs={12} spacing={4} margin={5} className={classes.logdata}>\r\n                        {logdata}\r\n                    </Grid>\r\n                </Grid>\r\n                </Box>\r\n            </Modal>\r\n        </>\r\n}\r\n\r\nexport const DBConnection = (props) => {\r\n    const record = useRecordContext();\r\n    let value = record ? record[\"connection_string\"] : \"\";\r\n    \r\n    if(props.mode !== \"edit\" && props.mode !== \"create\"){\r\n        return <Typography>{value}</Typography>\r\n    }\r\n    return <DBConnectionEdit {...props} />\r\n}\r\n\r\n\r\nconst api_url = (props) => {\r\n    const url = `/${props.name}/api`\r\n    return <Typography><a href={url}>{url}</a></Typography>\r\n}\r\n\r\nexport const ApiURL = (props) => {\r\n    const record = useRecordContext();\r\n    if(!record.id){\r\n        return null\r\n    }\r\n    return api_url(record)\r\n}\r\n\r\n\r\nexport const ApiAdminHome = (props) => {\r\n\r\n    const {data} = useGetList(\r\n            \"Apis\",\r\n            {pagination : {page: 0, perPage: 100}}\r\n        )\r\n    \r\n    const apis = data?.map(api => <li>{api_url(api)}</li>)\r\n\r\n    return <>\r\n                <Typography variant=\"h6\" component=\"h2\"> APIs</Typography>\r\n                <Typography>\r\n                    <ul>\r\n                        {apis}\r\n                    </ul>\r\n                </Typography>\r\n            </>\r\n}","\r\nexport const MyComp = (props) => {\r\n    return <div>HMMMM</div>\r\n}","import Grid from '@material-ui/core/Grid';\r\nimport { Typography } from '@material-ui/core';\r\nimport {\r\n    TextField,\r\n    PasswordInput\r\n} from \"react-admin\";\r\n\r\nimport {useRecordContext} from \"react-admin\";\r\nexport * from './external/UserPasswordTab'\r\nexport * from './ApiAdmin'\r\nexport * from './external'\r\n\r\n\r\nexport const SampleColumnField = ({attribute}) => {\r\n    return <TextField source={attribute.name} key={attribute.name} style={{color : \"red\" }} />\r\n}\r\n\r\nexport const EmployeeLabel = (props) => {\r\n    const employee = props.instance\r\n    return <div> {employee.attributes?.FirstName} {employee.attributes?.LastName}</div>\r\n}\r\n\r\nexport const CustomerLabel = (props) => {\r\n    const customer = props.instance\r\n    return <div> <b>{customer.attributes?.CompanyName}</b> <i>{customer.attributes?.ContactName}</i></div>\r\n}\r\n\r\nexport const UserPasswordField = (props) => {\r\n\r\n    if(props.mode === \"list\"){\r\n        return <span/>\r\n    }\r\n    if(props.mode === \"edit\"){\r\n        return <>\r\n            <Grid item xs={12} spacing={4} margin={5} >\r\n                <Typography variant=\"h6\" component=\"h6\" >Change Password</Typography>\r\n            </Grid>\r\n            <Grid item xs={4} spacing={4} margin={5} ><PasswordInput source=\"_password\" /> </Grid>\r\n            <Grid item xs={4} spacing={4} margin={5} ><PasswordInput source=\"_password\" /> </Grid>\r\n            <Grid item xs={4} spacing={4} margin={5} ></Grid>\r\n        </>\r\n    }\r\n    return <></>\r\n}\r\n\r\nexport const CustomTab = (props) => {\r\n    // eslint-disable-next-line no-unused-vars\r\n    const record = useRecordContext();\r\n    return <div>Some Text</div>\r\n}\r\n"],"names":["UserPasswordTab","conf","useConf","notify","useNotify","record","useRecordContext","useDataProvider","useState","pwdValue","setPwdValue","rpwdValue","setRPwdValue","submitColor","setSubmitColor","Box","component","sx","m","width","noValidate","autoComplete","FormControl","Grid","item","xs","spacing","margin","Typography","variant","id","label","type","onChange","e","target","value","length","console","log","Button","color","onClick","data","httpAuthClient","api_root","method","body","JSON","stringify","then","catch","ApiUserPasswordTab","setCurPwdValue","newPwdValue","setNewPwdValue","boxStyle","position","top","left","transform","bgcolor","border","boxShadow","p","textAlign","useStyles","makeStyles","joined_field","cursor","modalStyle","overflow","height","fontWeight","display","db_btn","db_grid","borderBottom","paddingBottom","paddingRight","actions","conn_str","backgroundColor","fontFamily","C2Rpc","url","options","defaultOptions","headers","localStorage","getItem","requestOptions","Object","assign","fetch","ApiModal","props","React","open","setOpen","output","setOutput","box_style","setBoxStyle","classes","stopPropagation","className","title","PlayCircleOutline","Modal","onClose","name","connection_string","port","hostname","create_url","Loading","response","json","create_api","ApiGenerateField","mode","ApiShow","show","DBConnectionEdit","form","useForm","other","setOther","username","setUsername","password","setPassword","dbhost","setDbhost","dbname","setDbname","dialect","setDialect","logdata","setLogData","create_conn","result","TextInput","source","initialValue","helperText","fullWidth","size","container","FormLabel","RadioGroup","defaultValue","FormControlLabel","control","Radio","err","alert","test_conn","change","undefined","msg","disabled","DBConnection","api_url","href","ApiURL","ApiAdminHome","useGetList","pagination","page","perPage","apis","map","api","MyComp","SampleColumnField","attribute","TextField","style","EmployeeLabel","employee","instance","attributes","FirstName","LastName","CustomerLabel","customer","CompanyName","ContactName","UserPasswordField","PasswordInput","CustomTab"],"sourceRoot":""}